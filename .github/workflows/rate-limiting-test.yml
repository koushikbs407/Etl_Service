name: Rate Limiting Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'Utility/rateLimiter.js'
      - 'api/server.js'
      - 'test-rate-limiting.js'
  pull_request:
    branches: [main]
    paths:
      - 'Utility/rateLimiter.js'
      - 'api/server.js'
      - 'test-rate-limiting.js'
  workflow_dispatch:

jobs:
  rate-limiting-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 24
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start MongoDB for testing
        run: |
          docker run -d --name test-mongo -p 27017:27017 mongo:latest
          sleep 10

      - name: Run rate limiting tests
        run: |
          export MONGODB_URI=mongodb://localhost:27017/test_etl_db
          export NODE_ENV=test
          npm run test:rate-limiting
        timeout-minutes: 5

      - name: Generate test badge
        if: always()
        run: |
          if [ -f "rate-limiting-test-report.json" ]; then
            PASSED=$(jq -r '.summary.passed' rate-limiting-test-report.json)
            TOTAL=$(jq -r '.summary.total' rate-limiting-test-report.json)
            SUCCESS_RATE=$(jq -r '.summary.success_rate' rate-limiting-test-report.json)
            
            if [ "$PASSED" = "$TOTAL" ]; then
              COLOR="brightgreen"
              STATUS="passing"
            else
              COLOR="red" 
              STATUS="failing"
            fi
            
            echo "BADGE_COLOR=$COLOR" >> $GITHUB_ENV
            echo "BADGE_STATUS=$STATUS" >> $GITHUB_ENV
            echo "SUCCESS_RATE=$SUCCESS_RATE" >> $GITHUB_ENV
          else
            echo "BADGE_COLOR=red" >> $GITHUB_ENV
            echo "BADGE_STATUS=error" >> $GITHUB_ENV
            echo "SUCCESS_RATE=0%" >> $GITHUB_ENV
          fi

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: rate-limiting-test-results-${{ github.run_number }}
          path: |
            rate-limiting-test-report.json
            rate-limiting-test-report.txt
          retention-days: 30

      - name: Create test summary
        if: always()
        run: |
          echo "## 🚦 Rate Limiting Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "rate-limiting-test-report.json" ]; then
            echo "### Summary" >> $GITHUB_STEP_SUMMARY
            echo "- **Success Rate:** $(jq -r '.summary.success_rate' rate-limiting-test-report.json)" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Tests:** $(jq -r '.summary.total' rate-limiting-test-report.json)" >> $GITHUB_STEP_SUMMARY
            echo "- **Passed:** $(jq -r '.summary.passed' rate-limiting-test-report.json) ✅" >> $GITHUB_STEP_SUMMARY
            echo "- **Failed:** $(jq -r '.summary.failed' rate-limiting-test-report.json) ❌" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "### Test Details" >> $GITHUB_STEP_SUMMARY
            jq -r '.tests[] | "- " + (if .passed then "✅" else "❌" end) + " **" + .name + "**" + (if .details then ": " + .details else "" end)' rate-limiting-test-report.json >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Test report not generated" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## 🚦 Rate Limiting Test Results\n\n';
            
            try {
              if (fs.existsSync('rate-limiting-test-report.json')) {
                const report = JSON.parse(fs.readFileSync('rate-limiting-test-report.json', 'utf8'));
                
                const statusIcon = report.summary.failed === 0 ? '✅' : '❌';
                
                comment += `${statusIcon} **Overall Status:** ${report.summary.failed === 0 ? 'PASSED' : 'FAILED'}\n\n`;
                comment += `**Summary:**\n`;
                comment += `- Success Rate: ${report.summary.success_rate}\n`;
                comment += `- Total Tests: ${report.summary.total}\n`;
                comment += `- Passed: ${report.summary.passed} ✅\n`;
                comment += `- Failed: ${report.summary.failed} ❌\n\n`;
                
                comment += `**Test Details:**\n`;
                report.tests.forEach(test => {
                  const icon = test.passed ? '✅' : '❌';
                  comment += `${icon} **${test.name}**`;
                  if (test.details) comment += `: ${test.details}`;
                  comment += '\n';
                });
                
                comment += `\n*Generated at: ${report.timestamp}*`;
              } else {
                comment += '❌ Test report could not be generated';
              }
            } catch (error) {
              comment += `❌ Error reading test results: ${error.message}`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail job if tests failed
        if: always()
        run: |
          if [ -f "rate-limiting-test-report.json" ]; then
            FAILED=$(jq -r '.summary.failed' rate-limiting-test-report.json)
            if [ "$FAILED" != "0" ]; then
              echo "❌ Rate limiting tests failed"
              exit 1
            fi
          else
            echo "❌ No test report found"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          docker stop test-mongo || true
          docker rm test-mongo || true