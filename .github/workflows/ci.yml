name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      # Allow warnings to not fail the workflow
      run: npm run lint || true
    
    - name: Run unit tests
      run: npm test
    
    - name: Seed test dataset
      run: |
        echo "symbol,name,price_usd,volume_24h,market_cap,percent_change_24h,timestamp,source" > Service/Historical_Data.csv
        echo "BTC,Bitcoin,45000,1000000000,850000000000,2.5,2024-01-01T00:00:00Z,test" >> Service/Historical_Data.csv
        echo "ETH,Ethereum,3000,500000000,360000000000,1.8,2024-01-01T00:00:00Z,test" >> Service/Historical_Data.csv
        echo "ADA,Cardano,0.5,200000000,15000000000,-0.8,2024-01-01T00:00:00Z,test" >> Service/Historical_Data.csv
    
    - name: Install Docker Compose
      run: sudo apt-get update && sudo apt-get install -y docker-compose
    
    - name: Start ETL services
      run: |
        cp .env.example .env
        docker-compose up -d --build
        sleep 30
      env:
        MONGODB_URI: mongodb://localhost:27017/crypto_etl_test
    
    - name: Wait for API readiness
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
    
    - name: Run smoke test
      run: |
        REFRESH_RESPONSE=$(curl -s -X POST -H "Authorization: Bearer demo-token-123" http://localhost:8080/refresh)
        echo "Refresh response: $REFRESH_RESPONSE"
        sleep 10
        METRICS=$(curl -s http://localhost:8080/metrics)
        echo "$METRICS" | grep -E "etl_rows_processed_total" || exit 1
        RUNS=$(curl -s http://localhost:8080/runs)
        echo "$RUNS"
        echo "$RUNS" | jq -e '.runs | length > 0' > /dev/null || exit 1
        RUN_STATUS=$(echo "$RUNS" | jq -r '.runs[0].status')
        [[ "$RUN_STATUS" == "success" || "$RUN_STATUS" == "partial_success" ]] || exit 1
    
    - name: Show logs on failure
      if: failure()
      run: |
        echo "=== API Logs ==="
        docker-compose logs api
        echo "=== MongoDB Logs ==="
        docker-compose logs mongo
    
    - name: Cleanup
      if: always()
      run: docker-compose down -v
